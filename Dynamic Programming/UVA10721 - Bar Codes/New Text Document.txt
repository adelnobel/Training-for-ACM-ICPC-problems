#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <limits>
 
using namespace std;

typedef long long ll;

ll dp[51][51][51][2];

int n, k, m;

ll solve(int remainingSpots, int remainingBars, int curBarLength, int lastBar)
{
    if(remainingBars < 0){
        return 0;
    }
    if(curBarLength > m) {
        return 0;
    }
    if(remainingSpots == 0) {
        if(remainingBars == 0) return 1;
        return 0; 
    }
    if(dp[remainingSpots][remainingBars][curBarLength][lastBar] != -1) return dp[remainingSpots][remainingBars][curBarLength][lastBar];
    
    ll ret = solve(remainingSpots - 1, remainingBars - (lastBar != 1), (lastBar == 1) ? curBarLength+1 : 1, 1 ); //Take one!
    ret += solve(remainingSpots - 1, remainingBars - (lastBar != 0), (lastBar == 0) ? curBarLength+1 : 1, 0 ); //Take zero!
    
    dp[remainingSpots][remainingBars][curBarLength][lastBar] = ret;

    return ret;
    
}

int main()
{
    //freopen("in.in", "r", stdin);
    
    while(scanf("%d %d %d", &n, &k, &m) != EOF)
    {
        memset(dp, -1, sizeof(dp));
        printf("%lld\n", solve(n-1, k-1, 1, 1));
    }
    
    
    
    return 0;
}